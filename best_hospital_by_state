

best <- function(state, outcome) {
## Read outcome data
file <- read.csv("outcome-of-care-measures.csv")

## Check that state and outcome are valid
states<- levels(file$State)
outcomes<-	 c('heart attack', 'heart failure', 'pneumonia')

      ##Method1 for checking invalid state and outcome 
##for (i in 1:length(states)){
##	if (state!=state[i]){ print("invalid State")}
##}
##if ((outcome!= 'heart attack')| (outcome!='heart failure') | (outcome!='pneumonia'))
##{print ("Invalid outcome")}


##Method2 for checking invalid state and outcome (case insensitive search from the levels of the state and return the state to search object.
## the given state argument is searched in the levels of state values 

search1<-grep(state,states,ignore.case=TRUE,value=TRUE)
if (search1!=state){print("Invalid State")}

search2<-grep(outcome,outcomes,ignore.case=TRUE,value=TRUE)
if(search2!=outcome){print("Invalid outcome")}

## Return hospital name in that state with lowest 30-day death
## rate(11,17,23)
col <- if (outcome == "heart attack") {
                11
        } else if (outcome == "heart failure") {
                17
        } else {
                23
        }
        
file[,col]<-suppressWarnings(as.numeric(levels(file[, col])[file[, col]]))
file[,2]<-as.character(file[,2])
statedata<-file[which(file$State==search1),]
order_data<- statedata[order(statedata[,col],statedata[,2],na.last = NA),]
order_data[1,2]

}
